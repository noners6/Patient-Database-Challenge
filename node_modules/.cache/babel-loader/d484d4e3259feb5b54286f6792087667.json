{"ast":null,"code":"var _jsxFileName = \"/Users/noners/Desktop/College/Coding Challenges/frontend-challenge-noam-gal/src/components/PatientTable.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { useTable } from 'react-table';\nimport { COLUMNS } from '../columns';\nimport * as api from '../mocks/api';\nimport { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BasicTable = () => {\n  _s();\n\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => api, []);\n  const tableInstance = useTable({\n    columns,\n    data\n  });\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_createElement(\"tr\", { ...headerGroup.getHeaderGroupProps,\n        key: columns.toString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }\n      }, headerGroup.headers.map(column => /*#__PURE__*/_createElement(\"th\", { ...column.getHeaderGroupProps(),\n        key: columns.toString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 15\n        }\n      }, column.render('Header')))))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: rows.map(row => {\n        prepareRow(row);\n        return /*#__PURE__*/_createElement(\"tr\", { ...row.getRowProps(),\n          key: rows.toString(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }\n        }, row.cells.map(cell => {\n          return /*#__PURE__*/_createElement(\"td\", { ...cell.getCellProps(),\n            key: rows.toString(),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 19\n            }\n          }, cell.render('Cell'));\n        }));\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BasicTable, \"YSJHb1hIKZZYXeKmHMNr5Q3rU2c=\", false, function () {\n  return [useTable];\n});\n\n_c = BasicTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicTable\");","map":{"version":3,"names":["useMemo","useTable","COLUMNS","api","BasicTable","columns","data","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","toString","headers","column","render","row","getRowProps","cells","cell","getCellProps"],"sources":["/Users/noners/Desktop/College/Coding Challenges/frontend-challenge-noam-gal/src/components/PatientTable.tsx"],"sourcesContent":["import { useMemo } from 'react';\nimport { useTable } from 'react-table';\nimport { COLUMNS } from '../columns';\nimport * as api from '../mocks/api';\n\nexport const BasicTable = () => {\n  const columns = useMemo(() => COLUMNS, []);\n  const data: any = useMemo(() => api, []);\n\n  const tableInstance = useTable({\n    columns,\n    data,\n  });\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    tableInstance;\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps} key={columns.toString()}>\n            {headerGroup.headers.map((column) => (\n              <th {...column.getHeaderGroupProps()} key={columns.toString()}>\n                {column.render('Header')}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()} key={rows.toString()}>\n              {row.cells.map((cell) => {\n                return (\n                  <td {...cell.getCellProps()} key={rows.toString()}>\n                    {cell.render('Cell')}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;EAAA;;EAC9B,MAAMC,OAAO,GAAGL,OAAO,CAAC,MAAME,OAAP,EAAgB,EAAhB,CAAvB;EACA,MAAMI,IAAS,GAAGN,OAAO,CAAC,MAAMG,GAAP,EAAY,EAAZ,CAAzB;EAEA,MAAMI,aAAa,GAAGN,QAAQ,CAAC;IAC7BI,OAD6B;IAE7BC;EAF6B,CAAD,CAA9B;EAKA,MAAM;IAAEE,aAAF;IAAiBC,iBAAjB;IAAoCC,YAApC;IAAkDC,IAAlD;IAAwDC;EAAxD,IACJL,aADF;EAGA,oBACE,sBAAWC,aAAa,EAAxB;IAAA,wBACE;MAAA,UACGE,YAAY,CAACG,GAAb,CAAkBC,WAAD,iBAChB,0BAAQA,WAAW,CAACC,mBAApB;QAAyC,GAAG,EAAEV,OAAO,CAACW,QAAR,EAA9C;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACGF,WAAW,CAACG,OAAZ,CAAoBJ,GAApB,CAAyBK,MAAD,iBACvB,0BAAQA,MAAM,CAACH,mBAAP,EAAR;QAAsC,GAAG,EAAEV,OAAO,CAACW,QAAR,EAA3C;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACGE,MAAM,CAACC,MAAP,CAAc,QAAd,CADH,CADD,CADH,CADD;IADH;MAAA;MAAA;MAAA;IAAA,QADF,eAYE,sBAAWV,iBAAiB,EAA5B;MAAA,UACGE,IAAI,CAACE,GAAL,CAAUO,GAAD,IAAS;QACjBR,UAAU,CAACQ,GAAD,CAAV;QACA,oBACE,0BAAQA,GAAG,CAACC,WAAJ,EAAR;UAA2B,GAAG,EAAEV,IAAI,CAACK,QAAL,EAAhC;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACGI,GAAG,CAACE,KAAJ,CAAUT,GAAV,CAAeU,IAAD,IAAU;UACvB,oBACE,0BAAQA,IAAI,CAACC,YAAL,EAAR;YAA6B,GAAG,EAAEb,IAAI,CAACK,QAAL,EAAlC;YAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UAAA,GACGO,IAAI,CAACJ,MAAL,CAAY,MAAZ,CADH,CADF;QAKD,CANA,CADH,CADF;MAWD,CAbA;IADH;MAAA;MAAA;MAAA;IAAA,QAZF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA+BD,CA3CM;;GAAMf,U;UAIWH,Q;;;KAJXG,U"},"metadata":{},"sourceType":"module"}