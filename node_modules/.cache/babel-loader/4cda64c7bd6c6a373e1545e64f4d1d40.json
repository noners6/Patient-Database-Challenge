{"ast":null,"code":"// Please do not change anything in this file!\nimport patients from './data.json';\n\nconst delay = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nconst getPatients = async () => {\n  await delay(1500);\n  return patients;\n};\n\nconst getPatient = async id => {\n  await delay(1000);\n  return patients.filter(p => p.id === id)[0];\n};\n\nexport { getPatients, getPatient };","map":{"version":3,"names":["patients","delay","ms","Promise","resolve","setTimeout","getPatients","getPatient","id","filter","p"],"sources":["/Users/noners/Desktop/College/Coding Challenges/frontend-challenge-noam-gal/src/mocks/api.ts"],"sourcesContent":["// Please do not change anything in this file!\nimport patients from './data.json';\n\ntype Patient = {\n  id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n  sex: string;\n  active: boolean;\n  updated_at: string;\n  created_at: string;\n};\n\nconst delay = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nconst getPatients = async (): Promise<Array<Patient>> => {\n  await delay(1500);\n  return patients;\n};\n\nconst getPatient = async (id: number): Promise<Patient> => {\n  await delay(1000);\n  return patients.filter((p: any) => p.id === id)[0];\n};\n\nexport { getPatients, getPatient };\n"],"mappings":"AAAA;AACA,OAAOA,QAAP,MAAqB,aAArB;;AAaA,MAAMC,KAAK,GAAIC,EAAD,IAA+B;EAC3C,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAP;AACD,CAFD;;AAIA,MAAMI,WAAW,GAAG,YAAqC;EACvD,MAAML,KAAK,CAAC,IAAD,CAAX;EACA,OAAOD,QAAP;AACD,CAHD;;AAKA,MAAMO,UAAU,GAAG,MAAOC,EAAP,IAAwC;EACzD,MAAMP,KAAK,CAAC,IAAD,CAAX;EACA,OAAOD,QAAQ,CAACS,MAAT,CAAiBC,CAAD,IAAYA,CAAC,CAACF,EAAF,KAASA,EAArC,EAAyC,CAAzC,CAAP;AACD,CAHD;;AAKA,SAASF,WAAT,EAAsBC,UAAtB"},"metadata":{},"sourceType":"module"}